1.   IntroductionDescribe in a paragraph what the project is about.Explain briefly in a paragraph how you have used patterns and technologies to complete the team projects.Describe in a paragraph the main strengths and weaknesses of your design and implementation. 2.   Architecture descriptionThis Architecture section gives a high level overview of the application, in which the overall architecture, and different system components are present. Describe the architecture patterns used (such as 3-tier architecture), and how your  architecture has a clear separation between front and back-end.Draw the architecture diagram to show the front and backend, main components, and the flow of the user business logic. (search online for examples of architecture diagrams. You don’t have to be very formal. Just draw a overview picture of your application)If you can, you are welcome to draw a couple of use cases using use case or sequence diagrams.  Alternatively/otherwise, just give textual description of some use cases, showing the flow of the business logic. (search online for examples of use case diagrams and sequence diagrams. Also see some samples of diagram or textual description)3.   Design descriptionHere you give details of design decisions. Describe the design patterns you used in the project, including MVC and DAO. Also, explain the main design decisions and trade-offs.Present the UML package/class diagram for main components, showing how different models are related. An example is shown below.Also present the database schema diagrams showing the database tables you designed, and how different database tables are related.  4.   Advanced Features (Beyond the requirements)Describe the features that are beyond the basic requirement (if any), as mentioned in the project pdf, for example,-           Use design patterns (in addition to MVC and DAO which are required), e.g,. Singleton, Factory, Observer, Façade etc-           Has one or more Web services that follow REST API (e.g., payment as a separate Web Service).Customer:-           All products have images.-           Product has inventory information (quantity remaining)-           Read and write reviews on items and rate items using five stars-           Ask questions to a live chatbot able to answer basic questions-           send confirmation email to customer after checkout.-           See their account page with customer info, purchase history etc…Administrator:-           Can run a Reports on sales with option to save as disk file (e.g. as PDF files).-           Maintain customer account pages with customer info, purchase history etc-           Maintain inventory, to change quantity of product (add inventory) Other creative/advanced features you developed…  E.g., security concerns, prevent SQL injection etc..    	….. other innobative features 5.   ImplementationHere describe the implementation decisions, the trade-offs.Specifically, describe the technologies that you has considered and explored for front-end (e.g., HTML, React, Angular) and back-end (e.g., Servlet/JSP, Springboots, Node.js, Rail),  and what are the trade-offs, and what is your final decision on the technologies for front-end and back-end, and justify your decision  -- especially if you use technologies that are not covered in class, e.g., REACT, Angular, Springboots, Node.js), explaining why you decided to use them and what makes them more favourable than Servlet/JSP covered in class.—-------------------------------------------------------For front-end, we used HTML+CSS+JS and for back-end, we used Servlets/JSPs.The main trade-off(s) of using these instead of already existing frameworks is that we have to do more of the work ourselves with the risk of doing something wrong, where instead, specific frameworks does more of the heavy or complex work for you. Though one reason for justification is that by not using frameworks, we have more control over the implementation of our project and we have a better idea of the “ins and outs” of our project, and we were more familiar with these technologies, compared to the technologies we didn’t learn in class, so by using what we already learned, we didn’t have to spend time learning these other technologies, and instead, used that time to develop our project.Similarly, also describe the database systems you have explored and finally chose. Justify your decision.—--------------------------------------------We decided to simply use SQLite since it was embedded, so we didn’t have to worry about database connections to a localhost….. 6.   Deployment effortsDescribe your efforts in finding a solution to the deployment of your project. Describe what you have tried to deploy the project, either online or to Docker, so other people can run your project.If you are successful in deploying the project, describe your final choice, and how the project is deployed.If you are not successful in deploying it, describe the problem you encountered.—---------------------------------------------Docker…….. 7.   Conclusion·         Summarize in a paragraph how you have used architecture and design patterns and technologies to complete the projects.·         Summarize in a paragraph the main strengths and weaknesses of your design and implementation.Advantages:More and better brainstorming, faster implementations, …..Drawbacks:Different coding philosophies/practices which could conflict with each other, at least one member could fall behind if they have obstacles in the way of their project work, eg. job, school, family, etc., ……